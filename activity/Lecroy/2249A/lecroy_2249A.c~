#ifdef WIN32

#include <stdio.h>

#else
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <string.h>
#include <errno.h>
#include <dirent.h>
#include <signal.h>
#include <unistd.h>
#include <ctype.h>
#include <netdb.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <sys/ioctl.h>
#include <math.h>

#endif
#include "crate_lib.h"
#include "lecroy_2249A.h"

short Linit(char* ip){			/*function to initialize CAMAC*/
	short crate_id;			
	char res[33];
	res[32]='\0';
	if ( ( crate_id=CROPEN(ip) ) < 0){		/*CROPEN is Library Function to open connection to CAMAC, negative output is error*/
		printf("Error: couldn't find the specific device at ip: %s\n",ip);
		return -1;
	}
	
	if ( CCCZ(crate_id)<0 ) {	/*Initialize dataway, negative output is error*/
		printf("Error: couldn't initialize DATA WAY\n");
		return -1;
	}

	if ( CCCC(crate_id)<0 ) {	/*Initialize dataway, negative output is error*/
		printf("Error: couldn't send clear signal\n");
		return -1;
       	}

	printf("DATA WAY initialized\n");
	/*
	if ( CMDSR(crate_id,"nim_enablecombo 1 1\r",res,32)<0 ) {	//Disable combo 1
		printf("Error: couldn't disable combo 1\n");
		return -1;
	}
	printf("Combo 1 Disabled : %s\n",res);

	if ( CMDSR(crate_id,"nim_enablecombo 2 1\r",res,32)<0 ) {	//Disable combo 2
		printf("Error: couldn't disable combo 2\n");
		return -1;
	}
	printf("Combo 2 Disabled: %s\n",res);

	if ( CMDSR(crate_id,"nim_enablecombo 1 0\r",res,32)<0 ) {	//Enable combo 1
		printf("Error: couldn't enable combo 1\n");
		return -1;
	}
	printf("Combo 1 Enabled: %s\n",res);

	
	if ( CMDSR(crate_id,"nim_enablecombo 2 0\r",res,32)<0 ) {	//Enable combo 2
		printf("Error: couldn't enable combo 2\n");
		return -1;
	}
	printf("Combo 2 Enabled: %s\n",res);

	if ( CMDSR(crate_id,"nim_resetcev 1\r",res,32)<0 ) {	       //Combo 1 Reset Event Counter
	       printf("Error: couldn't reset combo 1 counter\n");
			return -1;
	}
	printf("Combo 1 Reset Event Counter: %s\n",res);

	if ( CMDSR(crate_id,"nim_cack 1\r",res,32)<0 ) {	//Combo 1 acknowledgement
		printf("Error: couldn't acknowledge combo 1\n");
		return -1;
	}	
	printf("Combo 1 acknowledgement: %s\n",res);

	if ( CMDSR(crate_id,"nim_resetcev 2\r",res,32)<0 ) {	//Combo 2 Reset Event Counter
			printf("Error: couldn't reset combo 2 counter\n");
			return -1;
	}
	printf("Combo 2 Reset Event Counter: %s\n",res);

	if ( CMDSR(crate_id,"nim_cack 2\r",res,32)<0 ) {	//Combo 2 acknowledgement
		printf("Error: couldn't acknowledge combo 2\n");
		return -1;
	}	
	printf("Combo 2 acknowledgement: %s\n",res);
*/
	return crate_id;		/* if successfull, CAMAC assigned ID*/
}


short LenableLAM(short CID, short card){
	short res;
	CRATE_OP op;			/*CRATE_OP is a STRUCTURE, so it assigns op the type of STRUCTURE*/
	op.F=26;			/*Function F(26) of 2249A to Enable LAM*/
	op.A=1;				/*Needs any subaddress*/
	op.N=card;			/*Number of 2249A SLOT*/
	CFSA(CID,&op);			/*execute a CAMAC command with 24bit, uses Crate ID and fills and/or uses structure. In this case function is F(0)*/
	if (res<0){			/*Error responses are negative*/
		printf("Error: Couldn't enable LAM\n");
		return -1;
	}
	printf("LAM initialized\n");
	return 0;
}

short LdisableLAM(short CID, short card){
	short res;
	CRATE_OP op;			/*CRATE_OP is a STRUCTURE, so it assigns op the type of STRUCTURE*/
	op.F=24;			/*Function F(24) of 2249A to Disable LAM*/
	op.A=1;				/*Needs any subaddress*/
	op.N=card;			/*Number of 2249A SLOT*/
	CFSA(CID,&op);			/*execute a CAMAC command with 24bit, uses Crate ID and fills and/or uses structure. In this case function is F(0)*/
	if (res<0){			/*Error responses are negative*/
		printf("Error: Couldn't disable LAM\n");
		return -1;
	}
	printf("LAM disabled\n");
	return 0;
}

short Lclose(short crate_id){
	
	if ( (CRCLOSE(crate_id) ) < 0){		/*Close connection to CAMAC*/
		printf("Error: can't close the specific device\n");
		return -1;
	}
	
	return 1;
}

short Lread(short CID, short card, short add){		/*This function is specifically designed for this CAMAC module*/
	
	short res;
	short dato;
	CRATE_OP op;			/*CRATE_OP is a STRUCTURE, so it assigns op the type of STRUCTURE*/
	op.F=2;				/*Function F(0) of 2249A to Read Registers erasing it and LAM in A(11)*/
	op.N=card;			/*Number of 2249A SLOT*/
	op.A=add;			/*Address of Register. Correspondes to ANALOG Input NUMBER in MODULE*/
	CFSA(CID,&op);			/*execute a CAMAC command with 24bit, uses Crate ID and fills and/or uses structure. In this case function is F(0)*/
	if (res<0){			/*Error responses are negative*/
		printf("Error: Couldn't read module\n");
		return -1;
	}
	dato=op.DATA;			/*gets data response from F(0) CAMAC command, this is register data. It is saved inside op STRUCTURE*/
//	op.F=9;				/*Clears MODULE and LAM (look at me)*/
//	CFSA(CID,&op);			/*Executes CAMAC command F(9)*/
//	if (res<0){			/*Error responses are negative*/
//		printf("Error: CFSA command not executed\n");
//		return -1;
//	}
	op.A=11;			/* A(11) clears and Module */
	op.F=2;				/*Clears MODULE and LAM (look at me)*/
	CFSA(CID,&op);			/*Executes CAMAC command F(2)*/
	if (res<0){			/*Error responses are negative*/
		printf("Error: Couldn't clear module and LAM\n");
		return -1;
	}
		
	return dato;			/*output of program function Lread is dato with is DATA from register*/
}

float Lreadf(short CID, short card, short add){		/*it is exactly the same function than before, BUT it shows data without overflow bit*/
	
	short res;
	int dato;
	CRATE_OP op;
	op.F=2;				/*Function F(2) of 2249A to Read Registers WITHOUT erasing it*/
	op.N=card;
	op.A=add;
	CFSA(CID,&op);
	if (res<0){
		printf("Error: Couldn't read module\n");
		return -1;
	}
	dato=op.DATA;
//	op.F=9;				/*Executes CAMAC command F(9) - clear module and LAM*/
//	CFSA(CID,&op);
//	if (res<0){
//		printf("Error: CFSA command not executed\n");
//		return -1;
//	}
		
	return dato&(1023)*256/1024;		/*deletes the overflow bit to see the data correctly*/
	
	op.A=11;			/* A(11) clears and Module */
	op.F=2;				/*Clears MODULE and LAM (look at me)*/
	CFSA(CID,&op);			/*Executes CAMAC command F(2)*/
	if (res<0){			/*Error responses are negative*/
		printf("Error: Couldn't clear module and LAM\n");
		return -1;
	}

}

double Lgen(short CID,int width,double period,short polar,short on_off){
/*This function SETS special output of CAMAC Controller, OUTPUT 1 is Pulse Generator*/
/*If on_off=1 generator will be ON, if on_off=0, generator will be off*/
/*POLAR 0 means Reverse Polarity (HI to LOW), POLAR 1 means Direct Polarity (LO to HI)*/
/*width MUST be set in multiples of 88 nS up to 616 ns*/
char res [33];
res[32]='\0';
int mult_width;
int mult_per;
if (on_off==1){
mult_width = width/88;
int mod_width = width%88;
if (width>88 && width<616 && mod_width != 0) 
printf("Warning! you should set pulse time of width in multiples of 88 nS\n\
Pulse Width Setting: %d[nS]\tUser Seting:%d[nS]\tError is:%d[nS]\n",mult_width*88,width,mod_width);
else if (width>=88 && width<=616 && mod_width == 0)
printf("Pulse Width Setting: %d[nS]\n",width);
else if (width>616){mult_width=616/88;
printf("Warning! maximum value for width is 616 nS\nPulse Width Setting: 616[nS]\tUser Seting:%d[nS]\tError is:%d[nS]\n",width,width-616);}
else {mult_width=1;
printf("Warning! minimum value for width is 88 nS\nPulse Width Setting: 88[nS]\tUser Seting:%d[nS]\tError is:%d[nS]\n",width,88-width);}
/*Period MUST be set in steps of 93.1uS, from 186.2uS up to 95325.2*/
mult_per = (int)floor(period/93.1);
double mod_per = fmod(period,93.1);
if (period>186.2 && period<95325.2 && mod_per != 0.0) 
printf("Warning! you should set pulse period in multiples of 93.1 uS but more than 186.2 uS\n\
Pulse Period Setting: %5.2f[uS]\tUser Seting:%5.2f[uS]\tError is:%5.2f[uS]\n",((double)mult_per)*93.1,period,mod_per);
else if (period>=186.2 && period<=95325.2 && mod_per == 0.0)
printf("Pulse Period Setting: %5.2f[uS]\n",period);
else if (period<186.2){mult_per=2;
printf("Warning! Minimum Period Value is 186.2[uS]\n\
Pulse Period Setting: 186.2[uS]\tUser Seting:%5.2f[uS]\tError is:%5.2f[uS]\n",period,186.2-period);}
else {mult_per=(int)(95325.2/93.1);
printf("Warning! Maximum Period Value is 95325.2[uS]\n\
Pulse Period Setting: 95325.2[uS]\tUser Seting:%5.2f[uS]\tError is:%5.2f[uS]\n",period,period-95325.2);}
char command [32];
/*nim_setpulse sets pulse, first number is period second number is width third number is NIM polarization*/
	int n=sprintf(command,"nim_setpulse %d %d %d\r",mult_per,mult_width,polar);
		if ( (CMDSR(CID,command,res,32))<0 ){	
			printf("couldn't set nim pulse\n");				
			return -1;						
		}								
	return ((double)mult_per)*93.1;
	}
else	{printf("Pulse generator will be turn off, previous settings in generator are:\n");
	if ( (CMDSR(CID,"nim_getpulse\r",res,32))<0 ){		/*getting previous settings*/
			printf("couldn't get previous settings\n");
			return -1;
		}
	int ok,pol;
	sscanf(res,"%d %d %d %d",&ok,&mult_per,&mult_width,&pol);
	if (ok==0 && mult_per==0 && mult_width==0 && pol==0)
		{printf("Generator was already off\n");
		return 0;
		}
	else printf("Pulse Period: %5.2f[uS]\tPulse Width: %d[nS]\tPolarity:%d\n",((double)mult_per)*93.1,mult_width*88,pol);
	if ( (CMDSR(CID,"nim_pulseoff\r",res,32))<0 ){		/*turn off pulse*/
			printf("couldn't turn off pulse\n");
			return -1;
		}
	return 0;
	}
}

void *Lisr(short CID, short irq_type, unsigned int irq_data){
	short dato;
	char res[33];
	res[32]='\0';
	//printf("irq_type : %d\tirq_data : %d\n",irq_type,irq_data);
	
	switch (irq_type){
		case LAM_INT:
			{
			//printf("hubo un LAM wiiii!!!!!!!!!!!!\n");
			if (irq_data==QDCx){
			dato=Lread(CID, QDCn, address);
			}	
			LACK(CID);
			break;
			}
		case COMBO_INT:
			if ( CMDSR(CID,"nim_getcev 2\r",res,32)<0 ) {	/*Combo 2 counter value*/
			printf("Error: couldn't send getcev\n");
			
			}			
			
			//printf("Reading event %s\n",res);
			
			dato=Lread(CID, QDCn, address);
			
						
			if ( CMDSR(CID,"nim_cack 2\r",res,32)<0 ) {	/*Combo 2 acknowledgement*/
			printf("Error: couldn't send cack\n");
			return -1;
			}	
			//printf("respuesta nim_cack 2: %s\n",res);			

			break;
		case DEFAULT_INT:
			LACK(CID);
			printf("************************ALERTA ALERTA, INTRUSO APRETANDO DEFAULT!!!!!!!!!!!!!!!!!!!!!!!!!!!!*************\n");			
			break;
	}
	pthread_exit(dato);
}
