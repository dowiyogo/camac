#include "crate_lib.h"
#include "lecroy_2249A.h" 
#include <time.h>
#include <math.h>
#include <stdlib.h>
#include <unistd.h>

short CID, res;
char cmd_res[33];
char filename[50],aux[50];
int counter=1;
int i,t0;
short EC=0;
int data=0;
int events;
float percent,remainingtime0,remainingtime1;

FILE *outfile, *actfile;

short EnableScalerINHIBIT(short CID){
	if ( NOSOS(CID,2,1)<0){
		printf("Error: couldn't enable INHIBIT\n");
		return -1;
	}
	printf("Scaler count Inhibited\n");
	return 0;
}

short DisableScalerINHIBIT(short CID){
	if ( NOSOS(CID,2,0)<0){
		printf("Error: couldn't disable INHIBIT\n");
		return -1;
	}
	printf("Scaler count allowed\n");
	return 0;
}

void CuentaEscaler(short CID){
int i=0;
for (i=0;i<=11;i++){
int d=LreadScaler(CID,7,i);
printf("Cuenta scaler %d es : %d\n",i,d);
}
}

double getActivity(float delay, short CID,double period){
	EnableScalerINHIBIT(CID);
	system("sleep 0.05");	//system call for 5ms pause
	LclearScaler(CID,7);
	DisableScalerINHIBIT(CID);
	char command[32];	
	sprintf(command,"sleep %8.5f",delay);
	printf("calculating activity, please wait!\n");
	system(command);	//system call for 10 s pause
	EnableScalerINHIBIT(CID);
	int scaler=LreadScaler(CID,7,1);
	double tiempo=LreaderaseScaler(CID,7,0)*period/1000000;
	double activity=((double)scaler)/tiempo;
	printf("Elapsed time: %5.2f[s] Activity: %5.2f [Becquerel] Counts: %d\n",tiempo,activity,scaler);
	return activity; 
}

void *IRQHandler(short CID, short irq_type, unsigned int irq_data){
	CRATE_OP op;
	if(counter >= events ){ 
		pthread_exit(NULL);
		return;
		}
	switch (irq_type){
		case COMBO_INT:
			usleep(60);
			op.F=2;				
			op.N=11;
			op.A=10;
			res=CSSA(CID,&op);
				if (res<0){
					printf("ERROR: Couldn't read module\n");
			}
			data=op.DATA;
			fprintf(outfile,"%d\t",data);
			op.A=11;
			res=CSSA(CID,&op);
				if (res<0){
					printf("ERROR: Couldn't read module\n");
			}
			data=op.DATA;
			fprintf(outfile,"%d\n",data);
			percent=(float)counter/events*100;
			remainingtime1=(100-percent)/(percent/((int)time(NULL)-t0));
			remainingtime0=(1-0.7)*remainingtime1+0.7*remainingtime0;
			printf("\t%3.0f%%...complete\tremaining time:%3.1f\tcounts:%d\r",percent,remainingtime0,counter);
			fflush(NULL);
			CMDSR(CID,"nim_cack 1\r",cmd_res,32);
			counter++;
			break;
		default: 
			break;
		}
	return;
}

int main(int argc,char *argv[]){
	

CRATE_INFO crInfo;
cmd_res[32]='\0';
	
	if (argc>3){		/*There are not arguments for input in this executable file*/
		printf("you just can insert only one parameter \n\
			spectra [<num_events>] [<filename>]\n"); 
		return 0;
	}
	else if(argc>2){
		sprintf(filename,"%s",argv[2]);	
		events=atoi(argv[1]);
		
	} 
	else if(argc>1){
		sprintf(filename,"datos.txt");
		events=atoi(argv[1]);
	}
	
	else {
		sprintf(filename,"datos.txt");
		events=DEFAULT_EVENTS;
	}

	if( !(outfile=fopen(filename,"wr")) ){	/*If file can't be opened for writting, fopen returns NULL, that's why if is true if fopen is NULL*/
			printf("couldn't open file: %s.txt\n",filename);
			return 0;
	}

	if( !(actfile=fopen("activity_file.txt","a")) ){	/*If file can't be opened for writting, fopen returns NULL, that's why if is true if fopen is NULL*/
			printf("couldn't open file: activity_file.txt\n");
			return 0;
	}
	
	if ( (CID=Linit("192.168.1.102"))<0 ){		/*Linit needs CAMAC IP. CID is return from function Linit in Lecroy 2249A driver, output negative is error*/
			printf("couldn't initialize device at ip: 192.168.1.101\n");
			return 0;
	}

	printf("\n\n----------------------------------------------------------------------\n");
  	printf ( "COINCIDENCE ACTIVITY MEASUREMENT PROGRAM V1.0 -- by R.R.\n");
	printf("----------------------------------------------------------------------\n\n");

	printf("CID: %d\n",CID);		/*if Linit is successful, it returns CAMAC assigned ID*/

	time_t rawtime;
  	struct tm * timeinfo;

	time ( &rawtime );
  	timeinfo = localtime ( &rawtime );
	printf("----------------------------------------------------------------------\n");
  	printf ( "Starting Experiment - Local Time and Date: %s", asctime (timeinfo) );
	printf("----------------------------------------------------------------------\n\n");
	LdisableLAM(CID,11);
	LdisableLAM(CID,10);
	LdisableLAM(CID,9);
	double period_gen=Lgen(CID,616,1955.1,0,1);
	double period_clock=LSetClock(CID,9,500);
	EnableScalerINHIBIT(CID);
	LclearScaler(CID,10);
	printf("Coincidence Events to be measured: %d\n",events);
//	fprintf(outfile,"#PMT1\tPMT2\n",data); //chn10,chn11
	t0=(int)time(NULL);
	DisableScalerINHIBIT(CID);
	res=CRIRQ(CID,IRQHandler);
	CRGET(CID,&crInfo);
	pthread_join(crInfo.irq_tid,NULL);
	EnableScalerINHIBIT(CID);
	float rate=events/(float)((int)time(NULL)-t0);
	putchar('\n');
	putchar('\n');
	printf("By COMPUTER: Elapsed time: %d[s] Average Adquisition Rate: %5.2f[Hz]\n",(int)time(NULL)-t0,rate);

	double experiment_time=(((double)LreadScaler(CID,10,0))*period_gen)*1e-6;
	int coincidence=LreadScaler(CID,10,1);
	int PMT1=LreadScaler(CID,10,2);
	int PMT2=LreadScaler(CID,10,3);
	double dead_time=((double)LreadScaler(CID,10,11))*period_clock;
	double real_time=experiment_time-dead_time;
	double activity=events/real_time;
	printf("----------------------------------------------------------------------\n");
	printf("Real Experiment Time: %5.2f[s]\tDead Time: %5.2f[s]\n",experiment_time,dead_time,coincidence,PMT1,PMT2);
	printf("----------------------------------------------------------------------\n");
	printf("Coincidence Events:%d\tPMT1:%d\tPMT2:%d\n",coincidence,PMT1,PMT2);
	printf("----------------------------------------------------------------------\n");
	printf("PMT1 + PMT2 - Coincidence:%d => Total Activity:%5.2f[Beq]\n",(PMT1+PMT2-coincidence),((double)(PMT1+PMT2-coincidence))/experiment_time);
	printf("----------------------------------------------------------------------\n");
	printf("Coincidence Activity:%5.2f [Beq]\n",((double)coincidence)/experiment_time);
	printf("**********************************************************************\n");
	printf("* Experiment Time minus Dead Time:%5.2f[s] Activity:%5.2f[Beq] *\n",real_time,activity);
	printf("**********************************************************************\n\n");
	fprintf(actfile,"Data File\tActivity\tExperiment Time\tEvents\n");
	sprintf(aux,"%s\t%5.2f\t%10.2f\t%d\t%d",argv[2],activity,real_time,events);
	fprintf(actfile,"%s\n",aux);

	//the remaining lines close the files

	if( fclose(outfile)){	/*fclose returns EOF if it fails. In C every value BUT 0 are TRUE.*/
		printf("couldn't close file: %s\n",filename);
		return 0;
	}

	if( fclose(actfile)){	/*fclose returns EOF if it fails. In C every value BUT 0 are TRUE.*/
		printf("couldn't close file: activity_file.txt\n");
		return 0;
	}
	
	/*this lines will close connection with CAMAC, it needs CID*/
	if ( (Lclose(CID))<0 ){
			printf("couldn't close connection\n");
			return 0;
	}	
	return 1;
}
